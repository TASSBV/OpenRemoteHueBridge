log4j.rootLogger = INFO, console, file

log4j.appender.console= org.apache.log4j.ConsoleAppender
log4j.appender.console.Threshold = ERROR
log4j.appender.console.layout= org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern = %p [%t]: %m%n

log4j.appender.file = org.apache.log4j.RollingFileAppender
log4j.appender.file.File = ../logs/dev/dev.log
log4j.appender.file.Threshold = ERROR
log4j.appender.file.MaxFileSize = 500KB
log4j.appender.file.MaxBackupIndex = 10
log4j.appender.file.layout = org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern = %d %p [%t]: %m%n



# --------------------------------------------------------------------------------------------
#
#  OPENREMOTE CONSOLE AND BOOT LOG CATEGORIES
#
#  The following configuration lists specific logging categories that are directed to
#  the system's output console and boot.log file.
#
#  You can add more categories if you prefer to see more information on the console,
#  or remove a category if you feel the information is not relevant to you.
#
#  Typical allowed logging levels are : OFF, ERROR, WARN, INFO, DEBUG, TRACE, ALL
#
# --------------------------------------------------------------------------------------------


# Direct OpenRemote Controller 'startup' logging to standard output stream (console) and 
# to boot.log file. Console logging level is parameterized so that the startup scripts
# can  modify  it  based  on  execution  targets.   Set  environment  variable 
# CONTROLLER_STARTUP_LOG_LEVEL in the execution environment to control the level of log
# messages sent to the log targets, or use a fixed value (OFF, ERROR, WARN, INFO, DEBUG,
# TRACE, ALL) instead of the ${openremote.controller.startup.log.level} parameter below.
#
# Startup logging statements are generated at controller start and soft restart phases.
#
# Do note that the log targets (by default both the console output and boot.log) can
# use 'Threshold' to further limit output to appropriate levels.
#
# For even finer grained control, the following sub-categories of startup logging are
# available and can be configured below:
#
#    - OpenRemote.Controller.startup.sensor  --  relating to sensor creation at startup and
#                                                soft restart phases.
#
log4j.logger.OpenRemote.Controller.startup = ${openremote.controller.startup.log.level}, openremote-console, boot-log
log4j.logger.OpenRemote.Controller.protocol.russound = ALL, openremote-console




# --------------------------------------------------------------------------------------------
#
#  OPENREMOTE CONSOLE OUTPUT
#
#  Configuration of the logging targeting system's standard output stream.
#
#  The following settings allow you to set the 'Threshold' property to limit logging
#  statements from *all* logging categories that target console to a single priority level.
#
#  You can also modify the format of the log statements here.
#
# --------------------------------------------------------------------------------------------

log4j.appender.openremote-console = org.apache.log4j.ConsoleAppender

# Console threshold level has been parameterized to allow execution scripts to set 
# appropriate threshold levels. Use environment variable CONTROLLER_CONSOLE_THRESHOLD in the
# execution environment to use different threshold levels (OFF, ERROR, WARN, INFO, DEBUG,
# TRACE or OFF). To use a fixed value, replace the ${openremote.controller.console.threshold}
# parameter with desired value below.
log4j.appender.openremote-console.Threshold = ${openremote.controller.console.threshold}

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.openremote-console.layout = org.apache.log4j.PatternLayout
log4j.appender.openremote-console.layout.ConversionPattern = %p %d : %m%n



# ---------------------------------------------------------------------------------------------
#
#  OPENREMOTE BOOT.LOG FILE
#
#  Boot.log will collect log statements mainly from the OpenRemote.Controller.startup logging
#  category. Startup logs are generated when the controller starts (cold start) or during
#  soft restart phase.
#
#  By default boot.log collects statement at a lower DEBUG level compared to the startup logs
#  on the system console.
#
#  The log file will roll over (delete) old entries once maximum number of backup files
#  is reached (each file size is defined with MaxFileSize property). By default, one backup
#  file is defined with size limits at 500kb.
#
# ---------------------------------------------------------------------------------------------

log4j.appender.boot-log = org.apache.log4j.RollingFileAppender

# Location of the log file
log4j.appender.boot-log.File = ../logs/boot.log

# Log DEBUG or above to boot.log, from all startup log categories.
#
# If you want to adjust output from specific categories to different levels, see the category
# settings above. Notice however that setting a category level lower than this Threshold will
# not have an impact on log output unless the Threshold is also lowered.
log4j.appender.boot-log.Threshold = INFO

# Maximum size of the log file
log4j.appender.boot-log.MaxFileSize = 500KB

# Keep at most one backup file until older entries are deleted and written over.
log4j.appender.boot-log.MaxBackupIndex = 1

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.boot-log.layout = org.apache.log4j.PatternLayout
log4j.appender.boot-log.layout.ConversionPattern = %p %d : %m%n




# ---------------------------------------------------------------------------------------------
#
#  KNX LOGGING
#
#  Direct KNX related logging to their own category. KNX logging is separated to the usual
#  operational log that records some specific KNX related events and a detailed KNX debug
#  log that records a lot of detailed information about the KNX stack.
#
#  The debug log is by default set to low file size values with the assumption that the debug
#  log is not required under normal circumstances (and it can be very chatty). If you do need
#  to analyze the debug log, you are likely to need to increase the log sizes first to retrieve
#  sufficient information over a longer period of time.
#
#  Note on performance : debug log does have an impact on performance, however under usual
#  circumstances this is not an issue. However, if you are sending hundreds of KNX frames per
#  second and need to optimize performance, turning off the knx debug logging or all of the
#  KNX logging altogether may help with performance optimization.
#
# ---------------------------------------------------------------------------------------------


# Enable all of KNX logging -- file log appenders may threshold which records they
# want to include
log4j.logger.OpenRemote.Controller.protocol.knx = ALL, knx-file, knx-debug-file


# ---- KNX FILE LOG -------------------------------------------------------------------------------

# Log file will roll over (delete) old entries once maximum number of backup files
# is reached (each file size is defined with MaxFileSize property)
log4j.appender.knx-file = org.apache.log4j.RollingFileAppender

# Location of the log file
log4j.appender.knx-file.File = ../logs/knx/knx.log

# Only log INFO or above. Detailed debug messages are in a separate debug log file
log4j.appender.knx-file.Threshold = INFO

# Maximum size of the log file
log4j.appender.knx-file.MaxFileSize = 500KB

# Keep at most one backup file until older entries are deleted and written over.
log4j.appender.knx-file.MaxBackupIndex = 1

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.knx-file.layout = org.apache.log4j.PatternLayout
log4j.appender.knx-file.layout.ConversionPattern = %p %d (KNX): %m%n


# ---- KNX DEBUG LOG ------------------------------------------------------------------------------

# Log file will roll over (delete) old entries once  maximum number of backup files
# is reached (each file size is defined with MaxFileSize property). Both the size and
# number of backups is set rather low for debug logging by default (see values below).
# If you're tracking down an issue with the KNX implementation, you will want to increase
# these values.
log4j.appender.knx-debug-file = org.apache.log4j.RollingFileAppender

# Location of the log file
log4j.appender.knx-debug-file.File = ../logs/knx/knx-debug.log

# Logs *everything* related to KNX. Can be *very* chatty.
log4j.appender.knx-debug-file.Threshold = ALL

# Maximum size of the log file -- by default this is relatively low compared to the amount
# of logging that may occur at debug level. If you're debugging an issue, you will want to
# increase this file size limit and add a number of backup log files (see below) to ensure
# older log files are not deleted and written over.
log4j.appender.knx-debug-file.MaxFileSize = 100KB

# By default, do not keep backup logs. This means that as soon as the max file size is reached
# on the debug log, it is deleted and new empty log is created to replace it.
#
# If you're debugging an issue, you will want to increase both the file size and the number of
# backup files as the debug logging can be *very* noisy.
log4j.appender.knx-debug-file.MaxBackupIndex = 0

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.knx-debug-file.layout = org.apache.log4j.PatternLayout
log4j.appender.knx-debug-file.layout.ConversionPattern = %p %d (KNX): %m%n




# ---------------------------------------------------------------------------------------------
#
#  1-WIRE LOGGING
#
#  Direct 1-wire related logging to its own category. Currently 1-wire logging is all directed
#  into a single file. Set threshold (INFO, DEBUG, or other) accordingly.
#
# ---------------------------------------------------------------------------------------------


# Enable all of 1-wire logging -- file log appenders may threshold which records they
# want to include
log4j.logger.OpenRemote.Controller.protocol.onewire = ALL, onewire-file


# ---- 1-WIRE FILE LOG -------------------------------------------------------------------------------

# Log file will roll over (delete) old entries once maximum number of backup files
# is reached (each file size is defined with MaxFileSize property)
log4j.appender.onewire-file = org.apache.log4j.RollingFileAppender

# Location of the log file
log4j.appender.onewire-file.File = ../logs/onewire/onewire.log

# Only log INFO or above. If you want more detailed log, set threshold to DEBUG. If you want
# less detailed log, set threshold to WARN
log4j.appender.onewire-file.Threshold = INFO

# Maximum size of the log file
log4j.appender.onewire-file.MaxFileSize = 500KB

# Keep at most one backup file until older entries are deleted and written over.
log4j.appender.onewire-file.MaxBackupIndex = 1

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.onewire-file.layout = org.apache.log4j.PatternLayout
log4j.appender.onewire-file.layout.ConversionPattern = %p %d (1-WIRE): %m%n


# ---------------------------------------------------------------------------------------------
#
#  ISY-99
#
#  Direct ISY-99 related logging to its own category. Currently ISY-99 logging is all directed
#  into a single file. Set threshold (INFO, DEBUG, or other) accordingly.
#
# ---------------------------------------------------------------------------------------------
 
 
# Enable all of ISY-99 logging -- file log appenders may threshold which records they
# want to include
log4j.logger.OpenRemote.Controller.protocol.isy99 = ALL, isy99-file
 

# ---- ISY-99 FILE LOG -------------------------------------------------------------------------------

# Log file will roll over (delete) old entries once maximum number of backup files
# is reached (each file size is defined with MaxFileSize property)
log4j.appender.isy99-file = org.apache.log4j.RollingFileAppender

# Location of the log file
log4j.appender.isy99-file.File = ../logs/isy99/isy99.log

# Only log INFO or above. If you want more detailed log, set threshold to DEBUG. If you want
# less detailed log, set threshold to WARN
log4j.appender.isy99-file.Threshold = INFO

# Maximum size of the log file
log4j.appender.isy99-file.MaxFileSize = 500KB

# Keep at most one backup file until older entries are deleted and written over.
log4j.appender.isy99-file.MaxBackupIndex = 1

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.isy99-file.layout = org.apache.log4j.PatternLayout
log4j.appender.isy99-file.layout.ConversionPattern = %p %d (ISY-99): %m%n

# ---------------------------------------------------------------------------------------------
#
#  PANSTAMP LAGARTO LOGGING
#
#  Direct lagarto related logging to its own category. Currently lagarto logging is all directed
#  into a single file. Set threshold (INFO, DEBUG, or other) accordingly.
#
# ---------------------------------------------------------------------------------------------


# Enable all of lagarto logging -- file log appenders may threshold which records they
# want to include
log4j.logger.OpenRemote.Controller.protocol.lagarto = ALL, lagarto-file


# ---- LAGARTO FILE LOG -------------------------------------------------------------------------------

# Log file will roll over (delete) old entries once maximum number of backup files
# is reached (each file size is defined with MaxFileSize property)
log4j.appender.lagarto-file = org.apache.log4j.RollingFileAppender

# Location of the log file
log4j.appender.lagarto-file.File = ../logs/lagarto/lagarto.log

# Only log INFO or above. If you want more detailed log, set threshold to DEBUG. If you want
# less detailed log, set threshold to WARN
log4j.appender.lagarto-file.Threshold = INFO

# Maximum size of the log file
log4j.appender.lagarto-file.MaxFileSize = 500KB

# Keep at most one backup file until older entries are deleted and written over.
log4j.appender.lagarto-file.MaxBackupIndex = 1

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.lagarto-file.layout = org.apache.log4j.PatternLayout
log4j.appender.lagarto-file.layout.ConversionPattern = %p %d (LAGARTO): %m%n

# ---------------------------------------------------------------------------------------------
#
#  Z-Wave LOGGING
#
#  Direct z-wave related logging to its own category. Currently z-wave logging is all directed
#  into a single file. Set threshold (INFO, DEBUG, or other) accordingly.
#
# ---------------------------------------------------------------------------------------------


# Enable all of z-wave logging -- file log appenders may threshold which records they
# want to include
log4j.logger.OpenRemote.Controller.protocol.zwave = ALL, zwave-file, openremote-console


# ---- Z-Wave FILE LOG -------------------------------------------------------------------------------

# Log file will roll over (delete) old entries once maximum number of backup files
# is reached (each file size is defined with MaxFileSize property)
log4j.appender.zwave-file = org.apache.log4j.RollingFileAppender

# Location of the log file
log4j.appender.zwave-file.File = ../logs/zwave/zwave.log

# Only log INFO or above. If you want more detailed log, set threshold to DEBUG. If you want
# less detailed log, set threshold to WARN
log4j.appender.zwave-file.Threshold = DEBUG

# Maximum size of the log file
log4j.appender.zwave-file.MaxFileSize = 500KB

# Keep at most one backup file until older entries are deleted and written over.
log4j.appender.zwave-file.MaxBackupIndex = 1

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.zwave-file.layout = org.apache.log4j.PatternLayout
log4j.appender.zwave-file.layout.ConversionPattern = %p %d (Z-Wave): %m%n


# ---------------------------------------------------------------------------------------------
#
#  Vera LOGGING
#
#  Direct Vera related logging to its own category. Currently Vera logging is all directed
#  into a single file. Set threshold (INFO, DEBUG, or other) accordingly.
#
# ---------------------------------------------------------------------------------------------

# Enable all of Vera logging -- file log appenders may threshold which records they want to include
log4j.logger.OpenRemote.Controller.protocol.Vera = ALL, vera-file, openremote-console

# ---- Vera FILE LOG -------------------------------------------------------------------------------

# Log file will roll over (delete) old entries once maximum number of backup files
# is reached (each file size is defined with MaxFileSize property)
log4j.appender.vera-file = org.apache.log4j.RollingFileAppender

# Location of the log file
log4j.appender.vera-file.File = ../logs/vera.log

# Only log INFO or above. If you want more detailed log, set threshold to DEBUG. If you want
# less detailed log, set threshold to WARN
log4j.appender.vera-file.Threshold = DEBUG

# Maximum size of the log file
log4j.appender.vera-file.MaxFileSize = 500KB

# Keep at most one backup file until older entries are deleted and written over.
log4j.appender.vera-file.MaxBackupIndex = 1

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.vera-file.layout = org.apache.log4j.PatternLayout
log4j.appender.vera-file.layout.ConversionPattern = %p %d (Vera): %m%n


# ---------------------------------------------------------------------------------------------
#
#  DEVELOPMENT LOGGING
#
#  The following log configurations are development related, mostly debug logging. They're
#  fairly detailed and generally not needed for regular runtime operations (and can be 
#  disabled if necessary). 
#
#  If you're experiencing issues with the controller that you suspect are bugs, keeping the 
#  logs on and collecting them while the issue manifests itself will help with issue 
#  resolution.
#
#  There are multiple categories of development logs in the configuration below:
#
#  - OpenRemote.Controller.xml.parser
#
#        Logging related to building the controller object model by parsing the XML documents
#        associated with controller (e.g. controller.xml)
#
#  - OpenRemote.Controller.runtime.sensors
#
#        Runtime logging of sensor operations (can be noisy)
#
# ---------------------------------------------------------------------------------------------

log4j.logger.OpenRemote.Controller.xml.parser = ALL, xml-parser
log4j.logger.OpenRemote.Controller.runtime.sensors = ALL, sensor-dev


# ---- XML PARSING LOG -----------------------------------------------------------------------

# Log file will roll over (delete) old entries once  maximum number of backup files
# is reached (each file size is defined with MaxFileSize property). 
log4j.appender.xml-parser = org.apache.log4j.RollingFileAppender

# Location of the log file
log4j.appender.xml-parser.File = ../logs/dev/xml-parser.log

# Limits XML parser log output volume to debug or higher by default.
log4j.appender.xml-parser.Threshold = INFO

# Maximum size of the log file.
log4j.appender.xml-parser.MaxFileSize = 500KB

# By default, do not keep backup logs. As soon as max file size is reached the log is deleted 
# and new empty log is created to replace it.
#
# If you're debugging an issue with XML parsers, you may want to enable backup logs to avoid
# overwriting previous entries and possible increase the file size of one log file in the
# setting above.
log4j.appender.xml-parser.MaxBackupIndex = 0

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.xml-parser.layout = org.apache.log4j.PatternLayout
log4j.appender.xml-parser.layout.ConversionPattern = %p %d (XML): %m%n


# ---- SENSOR DEV LOG -----------------------------------------------------------------------------

# Log file will roll over (delete) old entries once  maximum number of backup files
# is reached (each file size is defined with MaxFileSize property).
log4j.appender.sensor-dev = org.apache.log4j.RollingFileAppender

# Location of the log file
log4j.appender.sensor-dev.File = ../logs/dev/sensors.log

# Limits sensor log output volume to debug or higher by default.
log4j.appender.sensor-dev.Threshold = INFO

# Maximum size of the log file.
log4j.appender.sensor-dev.MaxFileSize = 500KB

# By default, do not keep backup logs. As soon as max file size is reached the log is deleted
# and new empty log is created to replace it.
#
# If you're debugging an issue with sensors, you may want to enable backup logs to avoid
# overwriting previous entries and possible increase the file size of one log file in the
# setting above.
log4j.appender.sensor-dev.MaxBackupIndex = 0

# Formatting of log records -- print priority (level) %p, date/time %d and message %m
log4j.appender.sensor-dev.layout = org.apache.log4j.PatternLayout
log4j.appender.sensor-dev.layout.ConversionPattern = %p %d : %m%n




# -------------------------------------------------------------------------------------------------

# Throttle Spring's verbosity
log4j.logger.org.springframework=WARN
